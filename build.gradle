buildscript {
	repositories {
		jcenter()
		mavenCentral()
	}

	dependencies {
		classpath 'com.bmuschko:gradle-docker-plugin:3.0.7'
		classpath 'org.ajoberstar:gradle-git:1.3.2'
		classpath 'com.github.houbie:lesscss-gradle-plugin:1.0.3-less-1.7.0'
		classpath 'org.owasp:dependency-check-gradle:8.0.1'
	}
}

import com.github.houbie.gradle.lesscss.LesscTask
import com.bmuschko.gradle.docker.tasks.image.Dockerfile
import com.bmuschko.gradle.docker.tasks.image.DockerPullImage
import com.bmuschko.gradle.docker.tasks.image.DockerBuildImage
import org.gradle.plugins.ide.eclipse.model.SourceFolder
import org.ajoberstar.grgit.Grgit
import nl.idgis.gradle.play.PlayJavaPlugin

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'org.ajoberstar.grgit'
apply plugin: PlayJavaPlugin
apply plugin: 'org.owasp.dependencycheck'

def repo = Grgit.open(project.file('.'))
def describe = repo.describe()
if(describe && describe.startsWith('v')) {
	version = describe.substring(1)
} else {
	version = 'latest'
}

apply plugin: 'com.bmuschko.docker-remote-api'

repositories {
	maven {
		name "typesafe-maven-release"
		url "https://repo.typesafe.com/typesafe/maven-releases"
	}
	ivy {
		name "typesafe-ivy-release"
		url "https://repo.typesafe.com/typesafe/ivy-releases"
		layout "ivy"
	}
	maven {
		url "https://repo.deegree.org/content/repositories/public"
	}
	maven {
		url "https://repo.deegree.org/content/repositories/releases"
	}
	maven {
		url = "https://maven.pkg.github.com/IDgis/geoide-commons"
		credentials {
			username = System.getenv("GITHUB_USER") ?: ghUser
			password = System.getenv("GITHUB_TOKEN") ?: ghKey
		}
	}
	mavenCentral()
}

def scalaVersion = '2.11'
def playVersion = '2.4.6'

model {
	components {
		play {
			platform play: playVersion, scala: scalaVersion, java: '1.8'
			injectedRoutesGenerator = true
			
			sources {
				twirlTemplates {
					defaultImports = TwirlImports.JAVA
				}
			}
			
			binaries.all { binary ->
				tasks.create(tasks.taskName('compile', 'less'), LesscTask) { task ->
					sourceDir 'app/assets'
					include "**/*.less"
					exclude "**/_*.less"
					destinationDir = project.file("${project.buildDir}/less")
					
					binary.assets.addAssetDir destinationDir
					binary.assets.builtBy task
				}
			}
		}
	}
	
	distributions {
		playBinary { binary ->
			tasks.withType(org.gradle.jvm.tasks.Jar) {
				manifest {
					attributes("Implementation-Title": project.name)
					if(project.version) {
						attributes("Implementation-Version": project.version)
					}
				}
			}
		}
	}
	
	tasks {
		unpackTar(Copy) {
			dependsOn createPlayBinaryTarDist
			from tarTree("${project.buildDir}/distributions/playBinary.tar")
			into "${project.buildDir}/docker"
		}
		
		createDockerfile(Dockerfile) {
			destFile = project.file('build/docker/Dockerfile')
			from 'azul/zulu-openjdk:8'
			copyFile 'playBinary', '/opt'
			runCommand 'chmod u+x /opt/bin/playBinary'
			exposePort 9000
			defaultCommand "/opt/bin/playBinary"
		}
		
		pullBaseImage(DockerPullImage) {
			repository 'azul/zulu-openjdk'
			tag '8'
		}
		
		buildImage(DockerBuildImage) {
			dependsOn unpackTar, createDockerfile, pullBaseImage
			inputDir = project.file('build/docker')
			tag = "idgis/geopublisher_viewer:${project.version}"
		}
	}
}

dependencies {
	play "com.typesafe.play:play-java-ws_${scalaVersion}:${playVersion}"

	play 'nl.idgis.geoide.commons:geoide-ogc-client:1.2.2'
	
	play "org.webjars:webjars-play_${scalaVersion}:2.4.0-1"
	play 'org.webjars:openlayers:3.5.0'
	play 'org.webjars:dojo:1.10.4'
	play 'org.webjars:bootstrap:3.3.5'
	play 'org.webjars:jquery:2.1.4'
	play 'org.jsoup:jsoup:1.8.3'
	play 'org.pegdown:pegdown:1.5.0'
	play 'org.deegree:deegree-core-base:3.4.33'
	
	play('org.apache.zookeeper:zookeeper:3.4.5') {
		exclude group: 'javax.jms', module: 'jms'
		exclude group: 'com.sun.jdmk', module: 'jmxtools'
		exclude group: 'com.sun.jmx', module: 'jmxri'
		exclude group: 'org.jboss.netty', module: 'netty'
	}
}

defaultTasks 'clean', 'buildImage'